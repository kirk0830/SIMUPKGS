# script for reading voronoi indices generated by OVITO-basic
# in OVITO-basic, modification add module Voronoi analysis
# edge length threshold set to 0
# then export all data by File -> Export File -> IMD file format
# select data [type VoronoiIndex.3 VoronoiIndex.4 VoronoiIndex.5 VoronoiIndex.6]
#
# Example:
# 2 0 4 4 6
# 2 0 0 12 0
# 2 1 3 6 4
# 2 0 3 6 4
# 2 0 3 6 5
# 2 0 3 6 5
#
# remember to select all frames
import numpy as np

def lireVoronoi(
    header, 
    nframe, 
    atomtype = '2',
    motif = [], 
    concat2file = False,
    debug = False
    ):
    '''
    # Input description:\n
    header (str): cascattes of exported file from OVITO, e.g.: trajectory file is saved as Pd_300K.trj, OVITO exports
    file as Pd_300K.0, Pd_300K.1, Pd_300K.2, ..., Pd_300K.40, then header = 'Pd_300K'\n
    nframe (int): number of frames, by default starts from 0. e.g. if nframe = 40, will try to read file from *.0 to *.40\n
    atomtype (str): type of atom need to be counted for Voronoi tessellation\n
    concat2file (bool): whether print concat Voronoi tessellation list to file. In concat mode, Voronoi tessellation information of all
    atoms in all frames will be merged together, but it doesnot matter in frequency calculation because frequency should be calculated
    by dividing number of atoms and averged over all frames, equivalent with counting times over all frames and then divide by the number of
    all atoms in all frames.
    '''
    voro_dict = {}
    freq_motif = np.zeros_like(motif, dtype = float)
    voro_concat = []
    num = 0
    
    for iframe in range(nframe + 1):
        fname = header+'.'+str(iframe)
        try:
            with open(fname, mode = 'r') as f:
                if debug: print('LV| read {}'.format(fname))
                i_frame_voro = []
                line = 'start'
                while line:
                    line = f.readline()
                    if line.startswith('#') or len(line) <= 1:
                        continue
                    else:
                        # check atom type
                        if not (line[0] == atomtype):
                            continue

                        # read regular line
                        # format:
                        # type VoronoiIndex.3 VoronoiIndex.4 VoronoiIndex.5 VoronoiIndex.6
                        i_voro = line[2:-1]
                        for idx_motif in range(len(motif)):
                            if i_voro == motif[idx_motif]:
                                freq_motif[idx_motif] += 1
                        i_frame_voro.append(i_voro)
                        if concat2file:
                            voro_concat.append(i_voro)
                        num += 1
                        
                voro_dict[iframe] = i_frame_voro
                
        except FileNotFoundError:
            print('WARNING: file'+'\''+fname+'\''+'does not exist, skip!')
            nframe -= 1
    if concat2file:
        with open(file = header + '-concat.dat', mode = 'w', encoding = 'utf-8') as cf:
            for i_voro in voro_concat:
                cf.writelines(i_voro+'\n')

    freq_motif /= num

    return voro_dict, freq_motif, voro_concat

def VoroShape(shape_str):
    
    shape_dict = {
        'PerfectIcosahedron': '0 0 12 0',
        'ImperfectIcosahedron': '0 1 10 2',
        'bcc': '0 6 0 8',
        'Tri-cappedTrigonalPrism': '0 3 6 0',
        'Mono-cappedSquareArchimedeanAntiprism': '0 5 4 0'
    }
    return shape_dict[shape_str]
