# script for reading voronoi indices generated by OVITO-basic
# in OVITO-basic, modification add module Voronoi analysis
# remember to adjust Edge Length Threshold to ~1.1, ensure all frames have the same maximum face order as 6
# then export all data by File -> Export File -> IMD file format
# remember to select all frames
import numpy as np

def lireVoronoi(
    header, 
    nframe, 
    statistics = True, 
    motif = [], 
    concat2file = False
    ):
    '''
    # Input description:\n
    header: cascattes of exported file from OVITO, e.g.: trajectory file is saved as Pd_300K.trj, OVITO exports
    file as Pd_300K.0, Pd_300K.1, Pd_300K.2, ..., Pd_300K.40, then header = 'Pd_300K'\n
    nframe: number of frames, by default starts from 0. e.g. if nframe = 40, will try to read file from *.0 to *.40\n
    '''
    voro_dict = {}
    freq_motif = np.zeros_like(motif, dtype = float)
    voro_concat = []
    need_count_atoms = True
    natom = 0
    
    for iframe in range(nframe + 1):
        fname = header+'.'+str(iframe)
        try:
            with open(fname, mode = 'r') as f:
                print('LV| read {}'.format(fname))
                i_frame_voro = []
                line = 'start'
                while line:
                    line = f.readline()
                    if line.startswith('#') or len(line) <= 1:
                        continue
                    else:
                        if need_count_atoms:
                            natom += 1
                        # read regular line
                        # format:
                        # index, type, x, y, z, CN, volume, voroIndex1, 2, 3, 4, 5, 6, maxFaceOrder
                        i_voro = ''
                        if line[-14] == ' ':
                            i_voro = line[-15:-3]
                        else:
                            i_voro = line[-14:-3]
                        if statistics:
                            for idx_motif in range(len(motif)):
                                if i_voro == motif[idx_motif]:
                                    freq_motif[idx_motif] += 1
                        i_frame_voro.append(i_voro)
                        if concat2file:
                            voro_concat.append(i_voro)
                voro_dict[iframe] = i_frame_voro
                if need_count_atoms and natom != 0:
                    need_count_atoms = False
                
        except FileNotFoundError:
            print('WARNING: file'+'\''+fname+'\''+'does not exist, skip!')
            nframe -= 1
    if concat2file:
        with open(file = header + '-concat.dat', mode = 'w', encoding = 'utf-8') as cf:
            for i_voro in voro_concat:
                cf.writelines(i_voro+'\n')
    
    return voro_dict, freq_motif, voro_concat
